# -*- coding: utf-8 -*-
"""Hashira.java

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1apRIJ-roeu0jitEq9J_DrYZ7CylqaJmn
"""

# Install Java JDK
!apt-get install openjdk-17-jdk -y

# Verify Java installation
!java -version
!javac -version

# Commented out IPython magic to ensure Python compatibility.
# %%writefile ShamirSecretRecovery.java
# import java.io.*;
# import java.math.BigInteger;
# import java.util.*;
# import org.json.*;
# 
# public class ShamirSecretRecovery {
# 
#     static class Share {
#         int index;
#         BigInteger value;
#         Share(int index, BigInteger value) {
#             this.index = index;
#             this.value = value;
#         }
#     }
# 
#     public static void main(String[] args) {
#         try {
#             BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
#             StringBuilder sb = new StringBuilder();
#             String line;
#             while ((line = br.readLine()) != null) sb.append(line);
#             JSONObject json = new JSONObject(sb.toString());
# 
#             int n = json.getJSONObject("keys").getInt("n");
#             int k = json.getJSONObject("keys").getInt("k");
# 
#             List<Share> shares = new ArrayList<>();
#             for (String key : json.keySet()) {
#                 if (key.equals("keys")) continue;
#                 JSONObject obj = json.getJSONObject(key);
#                 int base = Integer.parseInt(obj.getString("base"));
#                 BigInteger value = new BigInteger(obj.getString("value"), base);
#                 shares.add(new Share(Integer.parseInt(key), value));
#             }
# 
#             Share wrongShare = null;
#             BigInteger secret = null;
# 
#             outer:
#             for (int i = 0; i < shares.size(); i++) {
#                 for (int j = 0; j < shares.size(); j++) {
#                     if (i == j) continue;
# 
#                     List<Share> candidateShares = new ArrayList<>();
#                     for (int idx = 0; idx < shares.size(); idx++) {
#                         if (idx != j) candidateShares.add(shares.get(idx));
#                     }
# 
#                     List<Share> subset = candidateShares.subList(0, k);
# 
#                     try {
#                         BigInteger computedSecret = lagrangeInterpolationAtZero(subset);
#                         boolean consistent = true;
#                         for (Share s : shares) {
#                             if (!subset.contains(s)) {
#                                 BigInteger predicted = lagrangeInterpolationAtX(subset, s.index);
#                                 if (!predicted.equals(s.value)) {
#                                     consistent = false;
#                                     break;
#                                 }
#                             }
#                         }
#                         if (consistent) {
#                             secret = computedSecret;
#                             wrongShare = shares.get(j);
#                             break outer;
#                         }
#                     } catch (ArithmeticException e) {}
#                 }
#             }
# 
#             if (secret != null && wrongShare != null) {
#                 System.out.println("Secret: " + secret);
#                 System.out.println("Wrong Share: " + wrongShare.index + " (" + wrongShare.value + ")");
#             } else {
#                 System.out.println("Failed to recover secret or identify wrong share.");
#             }
# 
#         } catch (Exception e) { e.printStackTrace(); }
#     }
# 
#     private static BigInteger lagrangeInterpolationAtZero(List<Share> shares) {
#         BigInteger result = BigInteger.ZERO;
#         for (int i = 0; i < shares.size(); i++) {
#             BigInteger xi = BigInteger.valueOf(shares.get(i).index);
#             BigInteger yi = shares.get(i).value;
#             BigInteger numerator = BigInteger.ONE;
#             BigInteger denominator = BigInteger.ONE;
# 
#             for (int j = 0; j < shares.size(); j++) {
#                 if (i == j) continue;
#                 BigInteger xj = BigInteger.valueOf(shares.get(j).index);
#                 numerator = numerator.multiply(xj.negate());
#                 denominator = denominator.multiply(xi.subtract(xj));
#             }
# 
#             result = result.add(yi.multiply(numerator).divide(denominator));
#         }
#         return result;
#     }
# 
#     private static BigInteger lagrangeInterpolationAtX(List<Share> shares, int x) {
#         BigInteger result = BigInteger.ZERO;
#         BigInteger X = BigInteger.valueOf(x);
# 
#         for (int i = 0; i < shares.size(); i++) {
#             BigInteger xi = BigInteger.valueOf(shares.get(i).index);
#             BigInteger yi = shares.get(i).value;
#             BigInteger numerator = BigInteger.ONE;
#             BigInteger denominator = BigInteger.ONE;
# 
#             for (int j = 0; j < shares.size(); j++) {
#                 if (i == j) continue;
#                 BigInteger xj = BigInteger.valueOf(shares.get(j).index);
#                 numerator = numerator.multiply(X.subtract(xj));
#                 denominator = denominator.multiply(xi.subtract(xj));
#             }
#             result = result.add(yi.multiply(numerator).divide(denominator));
#         }
#         return result;
#     }
# }
#

!wget -O json.jar https://repo1.maven.org/maven2/org/json/json/20210307/json-20210307.jar

!javac -cp json.jar ShamirSecretRecovery.java

# Commented out IPython magic to ensure Python compatibility.
# %%writefile input.json
# {
#   "keys": {"n":4,"k":3},
#   "1": {"base":"10","value":"4"},
#   "2": {"base":"2","value":"111"},
#   "3": {"base":"10","value":"12"},
#   "6": {"base":"4","value":"213"}
# }
#

!java -cp .:json.jar ShamirSecretRecovery < input.json

{
  "keys": {
    "n": 10,
    "k": 7
  },
  "1": {
    "base": "6",
    "value": "13444211440455345511"
  },
  "2": {
    "base": "15",
    "value": "aed7015a346d635"
  },
  "3": {
    "base": "15",
    "value": "6aeeb69631c227c"
  },
  "4": {
    "base": "16",
    "value": "e1b5e05623d881f"
  },
  "5": {
    "base": "8",
    "value": "316034514573652620673"
  },
  "6": {
    "base": "3",
    "value": "2122212201122002221120200210011020220200"
  },
  "7": {
    "base": "3",
    "value": "20120221122211000100210021102001201112121"
  },
  "8": {
    "base": "6",
    "value": "20220554335330240002224253"
  },
  "9": {
    "base": "12",
    "value": "45153788322a1255483"
  },
  "10": {
    "base": "7",
    "value": "1101613130313526312514143"
  }
}

!java -cp .:json.jar ShamirSecretRecovery < input_test2.json